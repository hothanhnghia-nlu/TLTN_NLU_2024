// <auto-generated />
using System;
using FITExamAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FITExamAPI.Migrations
{
    [DbContext(typeof(FitExamContext))]
    [Migration("20240529155015_UpdateMigration")]
    partial class UpdateMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FITExamAPI.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("FITExamAPI.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ExamTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("FITExamAPI.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("FITExamAPI.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("FITExamAPI.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ip")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Level")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Source")
                        .HasColumnType("longtext");

                    b.Property<sbyte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("FITExamAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("ShuffleOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("FITExamAPI.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<double?>("OverallTime")
                        .HasColumnType("double");

                    b.Property<double?>("Score")
                        .HasColumnType("double");

                    b.Property<int?>("TotalCorrectAnswer")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("FITExamAPI.Models.ResultDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResultId");

                    b.ToTable("ResultDetails");
                });

            modelBuilder.Entity("FITExamAPI.Models.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Credit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("FITExamAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<sbyte?>("Role")
                        .HasColumnType("tinyint");

                    b.Property<sbyte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FITExamAPI.Models.Answer", b =>
                {
                    b.HasOne("FITExamAPI.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FITExamAPI.Models.Exam", b =>
                {
                    b.HasOne("FITExamAPI.Models.User", "User")
                        .WithMany("Exams")
                        .HasForeignKey("CreatorId");

                    b.HasOne("FITExamAPI.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITExamAPI.Models.Image", b =>
                {
                    b.HasOne("FITExamAPI.Models.Question", "Question")
                        .WithMany("Images")
                        .HasForeignKey("QuestionId");

                    b.HasOne("FITExamAPI.Models.Subject", "Subject")
                        .WithOne("Image")
                        .HasForeignKey("FITExamAPI.Models.Image", "SubjectId");

                    b.HasOne("FITExamAPI.Models.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("FITExamAPI.Models.Image", "UserId");

                    b.Navigation("Question");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITExamAPI.Models.Log", b =>
                {
                    b.HasOne("FITExamAPI.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITExamAPI.Models.Question", b =>
                {
                    b.HasOne("FITExamAPI.Models.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("FITExamAPI.Models.Result", b =>
                {
                    b.HasOne("FITExamAPI.Models.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("ExamId");

                    b.HasOne("FITExamAPI.Models.User", "User")
                        .WithMany("Results")
                        .HasForeignKey("UserId");

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITExamAPI.Models.ResultDetail", b =>
                {
                    b.HasOne("FITExamAPI.Models.Answer", "Answer")
                        .WithMany("ResultDetails")
                        .HasForeignKey("AnswerId");

                    b.HasOne("FITExamAPI.Models.Question", "Question")
                        .WithMany("ResultDetails")
                        .HasForeignKey("QuestionId");

                    b.HasOne("FITExamAPI.Models.Result", "Result")
                        .WithMany("ResultDetails")
                        .HasForeignKey("ResultId");

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("FITExamAPI.Models.User", b =>
                {
                    b.HasOne("FITExamAPI.Models.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("FITExamAPI.Models.Answer", b =>
                {
                    b.Navigation("ResultDetails");
                });

            modelBuilder.Entity("FITExamAPI.Models.Exam", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("FITExamAPI.Models.Faculty", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FITExamAPI.Models.Question", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Options");

                    b.Navigation("ResultDetails");
                });

            modelBuilder.Entity("FITExamAPI.Models.Result", b =>
                {
                    b.Navigation("ResultDetails");
                });

            modelBuilder.Entity("FITExamAPI.Models.Subject", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("FITExamAPI.Models.User", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Image");

                    b.Navigation("Logs");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
